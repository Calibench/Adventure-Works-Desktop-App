ufnGetPhoneNumberTypeID,"-- ============================================= -- Author:		Tyler -- Create date: 07/16/2025 -- Description:	Gets the ID from the name -- ============================================= CREATE FUNCTION ufnGetPhoneNumberTypeID  ( 	-- Add the parameters for the function here 	@name nvarchar(50) ) RETURNS int AS BEGIN 	-- Declare the return variable here 	DECLARE @ID int  	-- Add the T-SQL statements to compute the return value here 	SELECT @ID = PhoneNumberTypeID 	FROM Person.PhoneNumberType 	WHERE name = @name  	-- Return the result of the function 	RETURN @ID  END ",SQL_SCALAR_FUNCTION
ufnGetDisplayName,"-- ============================================= -- Author:		Tyler -- Create date: 07/16/2025 -- Description:	Gets the Display Name -- ============================================= CREATE FUNCTION ufnGetDisplayName  ( 	-- Add the parameters for the function here 	@Username nvarchar(255), 	@Password nvarchar(255) ) RETURNS nvarchar(255) AS BEGIN 	-- Declare the return variable here 	DECLARE @DisplayName nvarchar(255)  	-- Add the T-SQL statements to compute the return value here 	SELECT @DisplayName = DisplayName 	FROM Person.Login 	WHERE Username = @Username AND Password = @Password  	-- Return the result of the function 	RETURN @DisplayName  END ",SQL_SCALAR_FUNCTION
ufnCheckUserName,"-- ============================================= -- Author:		Tyler -- Create date: 07/17/2025 -- Description:	Checks whether a username exists -- ============================================= CREATE FUNCTION ufnCheckUserName  ( 	-- Add the parameters for the function here 	@GivenUsername varchar(255) ) RETURNS varchar(255) AS BEGIN 	-- Declare the return variable here 	DECLARE @Username varchar(255)  	-- Add the T-SQL statements to compute the return value here 	select @Username = Username 	from Person.Login 	where Username = @GivenUsername  	-- Return the result of the function 	RETURN @Username  END ",SQL_SCALAR_FUNCTION
ufnGetAccountingStartDate," CREATE FUNCTION [dbo].[ufnGetAccountingStartDate]() RETURNS [datetime]  AS  BEGIN     RETURN CONVERT(datetime, '20030701', 112); END; ",SQL_SCALAR_FUNCTION
ufnGetAccountingEndDate," CREATE FUNCTION [dbo].[ufnGetAccountingEndDate]() RETURNS [datetime]  AS  BEGIN     RETURN DATEADD(millisecond, -2, CONVERT(datetime, '20040701', 112)); END; ",SQL_SCALAR_FUNCTION
ufnGetContactInformation," CREATE FUNCTION [dbo].[ufnGetContactInformation](@PersonID int) RETURNS @retContactInformation TABLE  (     -- Columns returned by the function     [PersonID] int NOT NULL,      [FirstName] [nvarchar](50) NULL,      [LastName] [nvarchar](50) NULL,  	[JobTitle] [nvarchar](50) NULL,     [BusinessEntityType] [nvarchar](50) NULL ) AS  -- Returns the first name, last name, job title and business entity type for the specified contact. -- Since a contact can serve multiple roles, more than one row may be returned. BEGIN 	IF @PersonID IS NOT NULL  		BEGIN 		IF EXISTS(SELECT * FROM [HumanResources].[Employee] e  					WHERE e.[BusinessEntityID] = @PersonID)  			INSERT INTO @retContactInformation 				SELECT @PersonID, p.FirstName, p.LastName, e.[JobTitle], 'Employee' 				FROM [HumanResources].[Employee] AS e 					INNER JOIN [Person].[Person] p 					ON p.[BusinessEntityID] = e.[BusinessEntityID] 				WHERE e.[BusinessEntityID] = @PersonID;  		IF EXISTS(SELECT * FROM [Purchasing].[Vendor] AS v 					INNER JOIN [Person].[BusinessEntityContact] bec  					ON bec.[BusinessEntityID] = v.[BusinessEntityID] 					WHERE bec.[PersonID] = @PersonID) 			INSERT INTO @retContactInformation 				SELECT @PersonID, p.FirstName, p.LastName, ct.[Name], 'Vendor Contact'  				FROM [Purchasing].[Vendor] AS v 					INNER JOIN [Person].[BusinessEntityContact] bec  					ON bec.[BusinessEntityID] = v.[BusinessEntityID] 					INNER JOIN [Person].ContactType ct 					ON ct.[ContactTypeID] = bec.[ContactTypeID] 					INNER JOIN [Person].[Person] p 					ON p.[BusinessEntityID] = bec.[PersonID] 				WHERE bec.[PersonID] = @PersonID; 		 		IF EXISTS(SELECT * FROM [Sales].[Store] AS s 					INNER JOIN [Person].[BusinessEntityContact] bec  					ON bec.[BusinessEntityID] = s.[BusinessEntityID] 					WHERE bec.[PersonID] = @PersonID) 			INSERT INTO @retContactInformation 				SELECT @PersonID, p.FirstName, p.LastName, ct.[Name], 'Store Contact'  				FROM [Sales].[Store] AS s 					INNER JOIN [Person].[BusinessEntityContact] bec  					ON bec.[BusinessEntityID] = s.[BusinessEntityID] 					INNER JOIN [Person].ContactType ct 					ON ct.[ContactTypeID] = bec.[ContactTypeID] 					INNER JOIN [Person].[Person] p 					ON p.[BusinessEntityID] = bec.[PersonID] 				WHERE bec.[PersonID] = @PersonID;  		IF EXISTS(SELECT * FROM [Person].[Person] AS p 					INNER JOIN [Sales].[Customer] AS c 					ON c.[PersonID] = p.[BusinessEntityID] 					WHERE p.[BusinessEntityID] = @PersonID AND c.[StoreID] IS NULL)  			INSERT INTO @retContactInformation 				SELECT @PersonID, p.FirstName, p.LastName, NULL, 'Consumer'  				FROM [Person].[Person] AS p 					INNER JOIN [Sales].[Customer] AS c 					ON c.[PersonID] = p.[BusinessEntityID] 					WHERE p.[BusinessEntityID] = @PersonID AND c.[StoreID] IS NULL;  		END  	RETURN; END; ",SQL_TABLE_VALUED_FUNCTION
ufnGetProductDealerPrice,"   CREATE FUNCTION [dbo].[ufnGetProductDealerPrice](@ProductID [int], @OrderDate [datetime]) RETURNS [money]  AS  -- Returns the dealer price for the product on a specific date. BEGIN     DECLARE @DealerPrice money;     DECLARE @DealerDiscount money;      SET @DealerDiscount = 0.60  -- 60% of list price      SELECT @DealerPrice = plph.[ListPrice] * @DealerDiscount      FROM [Production].[Product] p          INNER JOIN [Production].[ProductListPriceHistory] plph          ON p.[ProductID] = plph.[ProductID]              AND p.[ProductID] = @ProductID              AND @OrderDate BETWEEN plph.[StartDate] AND COALESCE(plph.[EndDate], CONVERT(datetime, '99991231', 112)); -- Make sure we get all the prices!      RETURN @DealerPrice; END; ",SQL_SCALAR_FUNCTION
ufnGetProductListPrice," CREATE FUNCTION [dbo].[ufnGetProductListPrice](@ProductID [int], @OrderDate [datetime]) RETURNS [money]  AS  BEGIN     DECLARE @ListPrice money;      SELECT @ListPrice = plph.[ListPrice]      FROM [Production].[Product] p          INNER JOIN [Production].[ProductListPriceHistory] plph          ON p.[ProductID] = plph.[ProductID]              AND p.[ProductID] = @ProductID              AND @OrderDate BETWEEN plph.[StartDate] AND COALESCE(plph.[EndDate], CONVERT(datetime, '99991231', 112)); -- Make sure we get all the prices!      RETURN @ListPrice; END; ",SQL_SCALAR_FUNCTION
ufnGetProductStandardCost," CREATE FUNCTION [dbo].[ufnGetProductStandardCost](@ProductID [int], @OrderDate [datetime]) RETURNS [money]  AS  -- Returns the standard cost for the product on a specific date. BEGIN     DECLARE @StandardCost money;      SELECT @StandardCost = pch.[StandardCost]      FROM [Production].[Product] p          INNER JOIN [Production].[ProductCostHistory] pch          ON p.[ProductID] = pch.[ProductID]              AND p.[ProductID] = @ProductID              AND @OrderDate BETWEEN pch.[StartDate] AND COALESCE(pch.[EndDate], CONVERT(datetime, '99991231', 112)); -- Make sure we get all the prices!      RETURN @StandardCost; END; ",SQL_SCALAR_FUNCTION
ufnGetStock," CREATE FUNCTION [dbo].[ufnGetStock](@ProductID [int]) RETURNS [int]  AS  -- Returns the stock level for the product. This function is used internally only BEGIN     DECLARE @ret int;          SELECT @ret = SUM(p.[Quantity])      FROM [Production].[ProductInventory] p      WHERE p.[ProductID] = @ProductID          AND p.[LocationID] = '6'; -- Only look at inventory in the misc storage          IF (@ret IS NULL)          SET @ret = 0          RETURN @ret END; ",SQL_SCALAR_FUNCTION
ufnGetDocumentStatusText," CREATE FUNCTION [dbo].[ufnGetDocumentStatusText](@Status [tinyint]) RETURNS [nvarchar](16)  AS  -- Returns the sales order status text representation for the status value. BEGIN     DECLARE @ret [nvarchar](16);      SET @ret =          CASE @Status             WHEN 1 THEN N'Pending approval'             WHEN 2 THEN N'Approved'             WHEN 3 THEN N'Obsolete'             ELSE N'** Invalid **'         END;          RETURN @ret END; ",SQL_SCALAR_FUNCTION
ufnGetPurchaseOrderStatusText," CREATE FUNCTION [dbo].[ufnGetPurchaseOrderStatusText](@Status [tinyint]) RETURNS [nvarchar](15)  AS  -- Returns the sales order status text representation for the status value. BEGIN     DECLARE @ret [nvarchar](15);      SET @ret =          CASE @Status             WHEN 1 THEN 'Pending'             WHEN 2 THEN 'Approved'             WHEN 3 THEN 'Rejected'             WHEN 4 THEN 'Complete'             ELSE '** Invalid **'         END;          RETURN @ret END; ",SQL_SCALAR_FUNCTION
ufnGetSalesOrderStatusText," CREATE FUNCTION [dbo].[ufnGetSalesOrderStatusText](@Status [tinyint]) RETURNS [nvarchar](15)  AS  -- Returns the sales order status text representation for the status value. BEGIN     DECLARE @ret [nvarchar](15);      SET @ret =          CASE @Status             WHEN 1 THEN 'In process'             WHEN 2 THEN 'Approved'             WHEN 3 THEN 'Backordered'             WHEN 4 THEN 'Rejected'             WHEN 5 THEN 'Shipped'             WHEN 6 THEN 'Cancelled'             ELSE '** Invalid **'         END;          RETURN @ret END; ",SQL_SCALAR_FUNCTION
ufnLeadingZeros," CREATE FUNCTION [dbo].[ufnLeadingZeros](     @Value int )  RETURNS varchar(8)  WITH SCHEMABINDING  AS  BEGIN     DECLARE @ReturnValue varchar(8);      SET @ReturnValue = CONVERT(varchar(8), @Value);     SET @ReturnValue = REPLICATE('0', 8 - DATALENGTH(@ReturnValue)) + @ReturnValue;      RETURN (@ReturnValue); END; ",SQL_SCALAR_FUNCTION
fn_diagramobjects," 	CREATE FUNCTION dbo.fn_diagramobjects()  	RETURNS int 	WITH EXECUTE AS N'dbo' 	AS 	BEGIN 		declare @id_upgraddiagrams		int 		declare @id_sysdiagrams			int 		declare @id_helpdiagrams		int 		declare @id_helpdiagramdefinition	int 		declare @id_creatediagram	int 		declare @id_renamediagram	int 		declare @id_alterdiagram 	int  		declare @id_dropdiagram		int 		declare @InstalledObjects	int  		select @InstalledObjects = 0  		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'), 			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'), 			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'), 			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'), 			@id_creatediagram = object_id(N'dbo.sp_creatediagram'), 			@id_renamediagram = object_id(N'dbo.sp_renamediagram'), 			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'),  			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')  		if @id_upgraddiagrams is not null 			select @InstalledObjects = @InstalledObjects + 1 		if @id_sysdiagrams is not null 			select @InstalledObjects = @InstalledObjects + 2 		if @id_helpdiagrams is not null 			select @InstalledObjects = @InstalledObjects + 4 		if @id_helpdiagramdefinition is not null 			select @InstalledObjects = @InstalledObjects + 8 		if @id_creatediagram is not null 			select @InstalledObjects = @InstalledObjects + 16 		if @id_renamediagram is not null 			select @InstalledObjects = @InstalledObjects + 32 		if @id_alterdiagram  is not null 			select @InstalledObjects = @InstalledObjects + 64 		if @id_dropdiagram is not null 			select @InstalledObjects = @InstalledObjects + 128 		 		return @InstalledObjects  	END 	",SQL_SCALAR_FUNCTION
ufnGetStateProvinceID,"-- ============================================= -- Author:		Tyler -- Create date: 07/15/2025 -- Description:	Get's StateProvinceID with a Name -- ============================================= CREATE FUNCTION ufnGetStateProvinceID  ( 	-- Add the parameters for the function here 	@Name nvarchar(50) ) RETURNS int AS BEGIN 	-- Declare the return variable here 	DECLARE @StateProvinceID int  	-- Add the T-SQL statements to compute the return value here 	SELECT @StateProvinceID = StateProvinceID     FROM Person.StateProvince     WHERE Name = @Name;  	-- Return the result of the function 	RETURN @StateProvinceID  END ",SQL_SCALAR_FUNCTION
ufnGetCountryCode,"-- ============================================= -- Author:		Tyler -- Create date: 07/15/2025 -- Description:	Get's StateProvinceID with a Name -- ============================================= CREATE FUNCTION ufnGetCountryCode ( 	-- Add the parameters for the function here 	@Name nvarchar(50) ) RETURNS nvarchar(50) AS BEGIN 	-- Declare the return variable here 	DECLARE @CountryRegionCode nvarchar(50)  	-- Add the T-SQL statements to compute the return value here 	SELECT @CountryRegionCode = CountryRegionCode     FROM Person.CountryRegion     WHERE Name = @Name;  	-- Return the result of the function 	RETURN @CountryRegionCode  END ",SQL_SCALAR_FUNCTION
ufnGetAddressTypeID," -- ============================================= -- Author:		Tyler -- Create date: 07/15/2025 -- Description:	Get's StateProvinceID with a Name -- ============================================= CREATE FUNCTION [dbo].[ufnGetAddressTypeID] ( 	-- Add the parameters for the function here 	@Name nvarchar(50) ) RETURNS int AS BEGIN 	-- Declare the return variable here 	DECLARE @AddressTypeID int  	-- Add the T-SQL statements to compute the return value here 	SELECT @AddressTypeID = AddressTypeID      FROM Person.AddressType     WHERE Name = @Name;  	-- Return the result of the function 	RETURN @AddressTypeID END ",SQL_SCALAR_FUNCTION
ufnGetAddressID,"-- ============================================= -- Author:		Tyler -- Create date: 07/15/2025 -- Description:	Returns the AddressID given the BusinessID, AddressTypeID -- ============================================= CREATE FUNCTION ufnGetAddresID  ( 	-- Add the parameters for the function here 	@BusinessEntityID int, 	@AddressTypeID int ) RETURNS int AS BEGIN 	-- Declare the return variable here 	DECLARE @AddressID int  	-- Add the T-SQL statements to compute the return value here 	SELECT @AddressID = addressID 	FROM Person.BusinessEntityAddress 	WHERE BusinessEntityID = @BusinessEntityID AND AddressTypeID = @AddressTypeID  	-- Return the result of the function 	RETURN @AddressID  END ",SQL_SCALAR_FUNCTION
