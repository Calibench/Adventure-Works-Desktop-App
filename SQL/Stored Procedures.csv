AdventureWorks2017,dbo,uspUpdatePersonPhoneNumberTypeID,AdventureWorks2017,dbo,uspUpdatePersonPhoneNumberTypeID,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/16/2025 -- Description:	Updates the Person's PhoneNumberTypeID given an PhoneNumberTypeID and PersonID -- ============================================= CREATE PROCEDURE uspUpdatePersonPhoneNumberTypeID  	-- Add the parameters for the stored procedure here 	@ID int = null,  	@PersonID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	update Person.PersonPhone 	set PhoneNumberTypeID = @ID 	where BusinessEntityID = @PersonID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-16 09:26:39.150,2025-07-16 09:26:39.150
AdventureWorks2017,dbo,uspUpdatePersonPhoneNumber,AdventureWorks2017,dbo,uspUpdatePersonPhoneNumber,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/16/2025 -- Description:	Updates the Person's PhoneNumber given PersonID -- ============================================= CREATE PROCEDURE uspUpdatePersonPhoneNumber  	-- Add the parameters for the stored procedure here 	@PhoneNumber nvarchar(25) = null,  	@PersonID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;     -- Insert statements for procedure here 	update Person.PersonPhone 	set PhoneNumber = @PhoneNumber 	where BusinessEntityID = @PersonID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-16 09:55:05.177,2025-07-16 09:56:30.857
AdventureWorks2017,dbo,uspUpdatePersonEmailAddress,AdventureWorks2017,dbo,uspUpdatePersonEmailAddress,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/16/2025 -- Description:	Updates the Person's email given PersonID -- ============================================= CREATE PROCEDURE [dbo].[uspUpdatePersonEmailAddress]  	-- Add the parameters for the stored procedure here 	@EmailAddress nvarchar(50) = null,  	@PersonID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;     -- Insert statements for procedure here 	update Person.EmailAddress 	set EmailAddress = @EmailAddress 	where BusinessEntityID = @PersonID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-16 09:57:29.310,2025-07-16 09:59:03.660
AdventureWorks2017,dbo,uspUpdatePersonEmailPromotion,AdventureWorks2017,dbo,uspUpdatePersonEmailPromotion,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/16/2025 -- Description:	Updates the Person's email promotion given PersonID -- ============================================= CREATE PROCEDURE uspUpdatePersonEmailPromotion  	-- Add the parameters for the stored procedure here 	@EmailPromotion int = null,  	@PersonID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;     -- Insert statements for procedure here 	update Person.Person 	set EmailPromotion = @EmailPromotion 	where BusinessEntityID = @PersonID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-16 09:58:30.627,2025-07-16 09:58:30.627
AdventureWorks2017,dbo,uspGetUsernamePassword,AdventureWorks2017,dbo,uspGetUsernamePassword,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/17/2025 -- Description:	Getting username and password -- ============================================= CREATE PROCEDURE uspGetUsernamePassword  	-- Add the parameters for the stored procedure here 	@Username nvarchar(255) = null,  	@Password nvarchar(255) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select Username, Password 	from Person.Login 	where Username = @Username and Password = @Password END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-17 10:33:53.207,2025-07-17 10:33:53.207
AdventureWorks2017,dbo,uspInsertNewAccount,AdventureWorks2017,dbo,uspInsertNewAccount,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/17/2025 -- Description:	Inserts a new user into the login table -- ============================================= CREATE PROCEDURE uspInsertNewAccount  	-- Add the parameters for the stored procedure here 	@FirstName varchar(255) = null,  	@LastName varchar(255) = null, 	@Username varchar(255) = null, 	@Password varchar(255) = null, 	@DisplayName varchar(255) = null, 	@Email varchar(255) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	insert into Person.Login(FirstName, LastName, Username, Password, DisplayName, Email) 	values(@FirstName, @LastName, @Username, @Password, @DisplayName, @Email) END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-17 13:46:09.503,2025-07-17 13:46:09.503
AdventureWorks2017,dbo,uspGetAllEmployeeIDs,AdventureWorks2017,dbo,uspGetAllEmployeeIDs,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/17/2025 -- Description:	Get all employee ID's -- ============================================= CREATE PROCEDURE uspGetAllEmployeeIDs  	-- Add the parameters for the stored procedure here AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select BusinessEntityID 	from HumanResources.Employee 	order by BusinessEntityID asc; END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-17 15:05:40.117,2025-07-17 15:05:40.117
AdventureWorks2017,dbo,uspGetBillOfMaterials,AdventureWorks2017,dbo,uspGetBillOfMaterials,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [dbo].[uspGetBillOfMaterials]     @StartProductID [int],     @CheckDate [datetime] AS BEGIN     SET NOCOUNT ON;      -- Use recursive query to generate a multi-level Bill of Material (i.e. all level 1      -- components of a level 0 assembly, all level 2 components of a level 1 assembly)     -- The CheckDate eliminates any components that are no longer used in the product on this date.     WITH [BOM_cte]([ProductAssemblyID], [ComponentID], [ComponentDesc], [PerAssemblyQty], [StandardCost], [ListPrice], [BOMLevel], [RecursionLevel]) -- CTE name and columns     AS (         SELECT b.[ProductAssemblyID], b.[ComponentID], p.[Name], b.[PerAssemblyQty], p.[StandardCost], p.[ListPrice], b.[BOMLevel], 0 -- Get the initial list of components for the bike assembly         FROM [Production].[BillOfMaterials] b             INNER JOIN [Production].[Product] p              ON b.[ComponentID] = p.[ProductID]          WHERE b.[ProductAssemblyID] = @StartProductID              AND @CheckDate >= b.[StartDate]              AND @CheckDate <= ISNULL(b.[EndDate], @CheckDate)         UNION ALL         SELECT b.[ProductAssemblyID], b.[ComponentID], p.[Name], b.[PerAssemblyQty], p.[StandardCost], p.[ListPrice], b.[BOMLevel], [RecursionLevel] + 1 -- Join recursive member to anchor         FROM [BOM_cte] cte             INNER JOIN [Production].[BillOfMaterials] b              ON b.[ProductAssemblyID] = cte.[ComponentID]             INNER JOIN [Production].[Product] p              ON b.[ComponentID] = p.[ProductID]          WHERE @CheckDate >= b.[StartDate]              AND @CheckDate <= ISNULL(b.[EndDate], @CheckDate)         )     -- Outer select from the CTE     SELECT b.[ProductAssemblyID], b.[ComponentID], b.[ComponentDesc], SUM(b.[PerAssemblyQty]) AS [TotalQuantity] , b.[StandardCost], b.[ListPrice], b.[BOMLevel], b.[RecursionLevel]     FROM [BOM_cte] b     GROUP BY b.[ComponentID], b.[ComponentDesc], b.[ProductAssemblyID], b.[BOMLevel], b.[RecursionLevel], b.[StandardCost], b.[ListPrice]     ORDER BY b.[BOMLevel], b.[ProductAssemblyID], b.[ComponentID]     OPTION (MAXRECURSION 25)  END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.117,2017-10-27 14:33:15.117
AdventureWorks2017,dbo,uspGetEmployeeManagers,AdventureWorks2017,dbo,uspGetEmployeeManagers,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [dbo].[uspGetEmployeeManagers]     @BusinessEntityID [int] AS BEGIN     SET NOCOUNT ON;      -- Use recursive query to list out all Employees required for a particular Manager     WITH [EMP_cte]([BusinessEntityID], [OrganizationNode], [FirstName], [LastName], [JobTitle], [RecursionLevel]) -- CTE name and columns     AS (         SELECT e.[BusinessEntityID], e.[OrganizationNode], p.[FirstName], p.[LastName], e.[JobTitle], 0 -- Get the initial Employee         FROM [HumanResources].[Employee] e  			INNER JOIN [Person].[Person] as p 			ON p.[BusinessEntityID] = e.[BusinessEntityID]         WHERE e.[BusinessEntityID] = @BusinessEntityID         UNION ALL         SELECT e.[BusinessEntityID], e.[OrganizationNode], p.[FirstName], p.[LastName], e.[JobTitle], [RecursionLevel] + 1 -- Join recursive member to anchor         FROM [HumanResources].[Employee] e              INNER JOIN [EMP_cte]             ON e.[OrganizationNode] = [EMP_cte].[OrganizationNode].GetAncestor(1)             INNER JOIN [Person].[Person] p              ON p.[BusinessEntityID] = e.[BusinessEntityID]     )     -- Join back to Employee to return the manager name      SELECT [EMP_cte].[RecursionLevel], [EMP_cte].[BusinessEntityID], [EMP_cte].[FirstName], [EMP_cte].[LastName],          [EMP_cte].[OrganizationNode].ToString() AS [OrganizationNode], p.[FirstName] AS 'ManagerFirstName', p.[LastName] AS 'ManagerLastName'  -- Outer select from the CTE     FROM [EMP_cte]          INNER JOIN [HumanResources].[Employee] e          ON [EMP_cte].[OrganizationNode].GetAncestor(1) = e.[OrganizationNode]         INNER JOIN [Person].[Person] p          ON p.[BusinessEntityID] = e.[BusinessEntityID]     ORDER BY [RecursionLevel], [EMP_cte].[OrganizationNode].ToString()     OPTION (MAXRECURSION 25)  END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.123,2017-10-27 14:33:15.123
AdventureWorks2017,dbo,uspGetManagerEmployees,AdventureWorks2017,dbo,uspGetManagerEmployees,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [dbo].[uspGetManagerEmployees]     @BusinessEntityID [int] AS BEGIN     SET NOCOUNT ON;      -- Use recursive query to list out all Employees required for a particular Manager     WITH [EMP_cte]([BusinessEntityID], [OrganizationNode], [FirstName], [LastName], [RecursionLevel]) -- CTE name and columns     AS (         SELECT e.[BusinessEntityID], e.[OrganizationNode], p.[FirstName], p.[LastName], 0 -- Get the initial list of Employees for Manager n         FROM [HumanResources].[Employee] e  			INNER JOIN [Person].[Person] p  			ON p.[BusinessEntityID] = e.[BusinessEntityID]         WHERE e.[BusinessEntityID] = @BusinessEntityID         UNION ALL         SELECT e.[BusinessEntityID], e.[OrganizationNode], p.[FirstName], p.[LastName], [RecursionLevel] + 1 -- Join recursive member to anchor         FROM [HumanResources].[Employee] e              INNER JOIN [EMP_cte]             ON e.[OrganizationNode].GetAncestor(1) = [EMP_cte].[OrganizationNode] 			INNER JOIN [Person].[Person] p  			ON p.[BusinessEntityID] = e.[BusinessEntityID]         )     -- Join back to Employee to return the manager name      SELECT [EMP_cte].[RecursionLevel], [EMP_cte].[OrganizationNode].ToString() as [OrganizationNode], p.[FirstName] AS 'ManagerFirstName', p.[LastName] AS 'ManagerLastName',         [EMP_cte].[BusinessEntityID], [EMP_cte].[FirstName], [EMP_cte].[LastName] -- Outer select from the CTE     FROM [EMP_cte]          INNER JOIN [HumanResources].[Employee] e          ON [EMP_cte].[OrganizationNode].GetAncestor(1) = e.[OrganizationNode] 			INNER JOIN [Person].[Person] p  			ON p.[BusinessEntityID] = e.[BusinessEntityID]     ORDER BY [RecursionLevel], [EMP_cte].[OrganizationNode].ToString()     OPTION (MAXRECURSION 25)  END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.130,2017-10-27 14:33:15.130
AdventureWorks2017,dbo,uspGetWhereUsedProductID,AdventureWorks2017,dbo,uspGetWhereUsedProductID,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [dbo].[uspGetWhereUsedProductID]     @StartProductID [int],     @CheckDate [datetime] AS BEGIN     SET NOCOUNT ON;      --Use recursive query to generate a multi-level Bill of Material (i.e. all level 1 components of a level 0 assembly, all level 2 components of a level 1 assembly)     WITH [BOM_cte]([ProductAssemblyID], [ComponentID], [ComponentDesc], [PerAssemblyQty], [StandardCost], [ListPrice], [BOMLevel], [RecursionLevel]) -- CTE name and columns     AS (         SELECT b.[ProductAssemblyID], b.[ComponentID], p.[Name], b.[PerAssemblyQty], p.[StandardCost], p.[ListPrice], b.[BOMLevel], 0 -- Get the initial list of components for the bike assembly         FROM [Production].[BillOfMaterials] b             INNER JOIN [Production].[Product] p              ON b.[ProductAssemblyID] = p.[ProductID]          WHERE b.[ComponentID] = @StartProductID              AND @CheckDate >= b.[StartDate]              AND @CheckDate <= ISNULL(b.[EndDate], @CheckDate)         UNION ALL         SELECT b.[ProductAssemblyID], b.[ComponentID], p.[Name], b.[PerAssemblyQty], p.[StandardCost], p.[ListPrice], b.[BOMLevel], [RecursionLevel] + 1 -- Join recursive member to anchor         FROM [BOM_cte] cte             INNER JOIN [Production].[BillOfMaterials] b              ON cte.[ProductAssemblyID] = b.[ComponentID]             INNER JOIN [Production].[Product] p              ON b.[ProductAssemblyID] = p.[ProductID]          WHERE @CheckDate >= b.[StartDate]              AND @CheckDate <= ISNULL(b.[EndDate], @CheckDate)         )     -- Outer select from the CTE     SELECT b.[ProductAssemblyID], b.[ComponentID], b.[ComponentDesc], SUM(b.[PerAssemblyQty]) AS [TotalQuantity] , b.[StandardCost], b.[ListPrice], b.[BOMLevel], b.[RecursionLevel]     FROM [BOM_cte] b     GROUP BY b.[ComponentID], b.[ComponentDesc], b.[ProductAssemblyID], b.[BOMLevel], b.[RecursionLevel], b.[StandardCost], b.[ListPrice]     ORDER BY b.[BOMLevel], b.[ProductAssemblyID], b.[ComponentID]     OPTION (MAXRECURSION 25)  END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.133,2017-10-27 14:33:15.133
AdventureWorks2017,HumanResources,uspUpdateEmployeeHireInfo,AdventureWorks2017,HumanResources,uspUpdateEmployeeHireInfo,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [HumanResources].[uspUpdateEmployeeHireInfo]     @BusinessEntityID [int],      @JobTitle [nvarchar](50),      @HireDate [datetime],      @RateChangeDate [datetime],      @Rate [money],      @PayFrequency [tinyint],      @CurrentFlag [dbo].[Flag]  WITH EXECUTE AS CALLER AS BEGIN     SET NOCOUNT ON;      BEGIN TRY         BEGIN TRANSACTION;          UPDATE [HumanResources].[Employee]          SET [JobTitle] = @JobTitle              ,[HireDate] = @HireDate              ,[CurrentFlag] = @CurrentFlag          WHERE [BusinessEntityID] = @BusinessEntityID;          INSERT INTO [HumanResources].[EmployeePayHistory]              ([BusinessEntityID]             ,[RateChangeDate]             ,[Rate]             ,[PayFrequency])          VALUES (@BusinessEntityID, @RateChangeDate, @Rate, @PayFrequency);          COMMIT TRANSACTION;     END TRY     BEGIN CATCH         -- Rollback any active or uncommittable transactions before         -- inserting information in the ErrorLog         IF @@TRANCOUNT > 0         BEGIN             ROLLBACK TRANSACTION;         END          EXECUTE [dbo].[uspLogError];     END CATCH; END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.137,2017-10-27 14:33:15.137
AdventureWorks2017,HumanResources,uspUpdateEmployeeLogin,AdventureWorks2017,HumanResources,uspUpdateEmployeeLogin,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [HumanResources].[uspUpdateEmployeeLogin]     @BusinessEntityID [int],      @OrganizationNode [hierarchyid],     @LoginID [nvarchar](256),     @JobTitle [nvarchar](50),     @HireDate [datetime],     @CurrentFlag [dbo].[Flag] WITH EXECUTE AS CALLER AS BEGIN     SET NOCOUNT ON;      BEGIN TRY         UPDATE [HumanResources].[Employee]          SET [OrganizationNode] = @OrganizationNode              ,[LoginID] = @LoginID              ,[JobTitle] = @JobTitle              ,[HireDate] = @HireDate              ,[CurrentFlag] = @CurrentFlag          WHERE [BusinessEntityID] = @BusinessEntityID;     END TRY     BEGIN CATCH         EXECUTE [dbo].[uspLogError];     END CATCH; END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.140,2017-10-27 14:33:15.140
AdventureWorks2017,dbo,uspPrintError,AdventureWorks2017,dbo,uspPrintError,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- uspPrintError prints error information about the error that caused  -- execution to jump to the CATCH block of a TRY...CATCH construct.  -- Should be executed from within the scope of a CATCH block otherwise  -- it will return without printing any error information. CREATE PROCEDURE [dbo].[uspPrintError]  AS BEGIN     SET NOCOUNT ON;      -- Print error information.      PRINT 'Error ' + CONVERT(varchar(50), ERROR_NUMBER()) +           ', Severity ' + CONVERT(varchar(5), ERROR_SEVERITY()) +           ', State ' + CONVERT(varchar(5), ERROR_STATE()) +            ', Procedure ' + ISNULL(ERROR_PROCEDURE(), '-') +            ', Line ' + CONVERT(varchar(5), ERROR_LINE());     PRINT ERROR_MESSAGE(); END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:01.403,2017-10-27 14:33:01.403
AdventureWorks2017,HumanResources,uspUpdateEmployeePersonalInfo,AdventureWorks2017,HumanResources,uspUpdateEmployeePersonalInfo,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," CREATE PROCEDURE [HumanResources].[uspUpdateEmployeePersonalInfo]     @BusinessEntityID [int],      @NationalIDNumber [nvarchar](15),      @BirthDate [datetime],      @MaritalStatus [nchar](1),      @Gender [nchar](1) WITH EXECUTE AS CALLER AS BEGIN     SET NOCOUNT ON;      BEGIN TRY         UPDATE [HumanResources].[Employee]          SET [NationalIDNumber] = @NationalIDNumber              ,[BirthDate] = @BirthDate              ,[MaritalStatus] = @MaritalStatus              ,[Gender] = @Gender          WHERE [BusinessEntityID] = @BusinessEntityID;     END TRY     BEGIN CATCH         EXECUTE [dbo].[uspLogError];     END CATCH; END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.143,2017-10-27 14:33:15.143
AdventureWorks2017,dbo,uspLogError,AdventureWorks2017,dbo,uspLogError,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- uspLogError logs error information in the ErrorLog table about the  -- error that caused execution to jump to the CATCH block of a  -- TRY...CATCH construct. This should be executed from within the scope  -- of a CATCH block otherwise it will return without inserting error  -- information.  CREATE PROCEDURE [dbo].[uspLogError]      @ErrorLogID [int] = 0 OUTPUT -- contains the ErrorLogID of the row inserted AS                               -- by uspLogError in the ErrorLog table BEGIN     SET NOCOUNT ON;      -- Output parameter value of 0 indicates that error      -- information was not logged     SET @ErrorLogID = 0;      BEGIN TRY         -- Return if there is no error information to log         IF ERROR_NUMBER() IS NULL             RETURN;          -- Return if inside an uncommittable transaction.         -- Data insertion/modification is not allowed when          -- a transaction is in an uncommittable state.         IF XACT_STATE() = -1         BEGIN             PRINT 'Cannot log error since the current transaction is in an uncommittable state. '                  + 'Rollback the transaction before executing uspLogError in order to successfully log error information.';             RETURN;         END          INSERT [dbo].[ErrorLog]              (             [UserName],              [ErrorNumber],              [ErrorSeverity],              [ErrorState],              [ErrorProcedure],              [ErrorLine],              [ErrorMessage]             )          VALUES              (             CONVERT(sysname, CURRENT_USER),              ERROR_NUMBER(),             ERROR_SEVERITY(),             ERROR_STATE(),             ERROR_PROCEDURE(),             ERROR_LINE(),             ERROR_MESSAGE()             );          -- Pass back the ErrorLogID of the row inserted         SET @ErrorLogID = @@IDENTITY;     END TRY     BEGIN CATCH         PRINT 'An error occurred in stored procedure uspLogError: ';         EXECUTE [dbo].[uspPrintError];         RETURN -1;     END CATCH END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:01.410,2017-10-27 14:33:01.410
AdventureWorks2017,dbo,uspSearchCandidateResumes,AdventureWorks2017,dbo,uspSearchCandidateResumes,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," --A stored procedure which demonstrates integrated full text search  CREATE PROCEDURE [dbo].[uspSearchCandidateResumes]     @searchString [nvarchar](1000),        @useInflectional [bit]=0,     @useThesaurus [bit]=0,     @language[int]=0   WITH EXECUTE AS CALLER AS BEGIN     SET NOCOUNT ON;        DECLARE @string nvarchar(1050)       --setting the lcid to the default instance LCID if needed       IF @language = NULL OR @language = 0        BEGIN              SELECT @language =CONVERT(int, serverproperty('lcid'))         END                     --FREETEXTTABLE case as inflectional and Thesaurus were required       IF @useThesaurus = 1 AND @useInflectional = 1           BEGIN                   SELECT FT_TBL.[JobCandidateID], KEY_TBL.[RANK] FROM [HumanResources].[JobCandidate] AS FT_TBL                          INNER JOIN FREETEXTTABLE([HumanResources].[JobCandidate],*, @searchString,LANGUAGE @language) AS KEY_TBL                    ON  FT_TBL.[JobCandidateID] =KEY_TBL.[KEY]             END        ELSE IF @useThesaurus = 1             BEGIN                   SELECT @string ='FORMSOF(THESAURUS,""'+@searchString +'""'+')'                         SELECT FT_TBL.[JobCandidateID], KEY_TBL.[RANK] FROM [HumanResources].[JobCandidate] AS FT_TBL                          INNER JOIN CONTAINSTABLE([HumanResources].[JobCandidate],*, @string,LANGUAGE @language) AS KEY_TBL                    ON  FT_TBL.[JobCandidateID] =KEY_TBL.[KEY]         END        ELSE IF @useInflectional = 1             BEGIN                   SELECT @string ='FORMSOF(INFLECTIONAL,""'+@searchString +'""'+')'                   SELECT FT_TBL.[JobCandidateID], KEY_TBL.[RANK] FROM [HumanResources].[JobCandidate] AS FT_TBL                          INNER JOIN CONTAINSTABLE([HumanResources].[JobCandidate],*, @string,LANGUAGE @language) AS KEY_TBL                    ON  FT_TBL.[JobCandidateID] =KEY_TBL.[KEY]         END          ELSE --base case, plain CONTAINSTABLE             BEGIN                   SELECT @string='""'+@searchString +'""'                   SELECT FT_TBL.[JobCandidateID],KEY_TBL.[RANK] FROM [HumanResources].[JobCandidate] AS FT_TBL                          INNER JOIN CONTAINSTABLE([HumanResources].[JobCandidate],*,@string,LANGUAGE @language) AS KEY_TBL                    ON  FT_TBL.[JobCandidateID] =KEY_TBL.[KEY]             END  END; ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2017-10-27 14:33:15.147,2017-10-27 14:33:15.147
AdventureWorks2017,dbo,uspGetCultureID,AdventureWorks2017,dbo,uspGetCultureID,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- ============================================= -- Author:		Tyler -- Create date: 07/02/2025 -- Description:	Gets CultureID given a name -- ============================================= CREATE PROCEDURE [dbo].[uspGetCultureID]  	-- Add the parameters for the stored procedure here 	@CultureName nvarchar(50) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select cultureID 	from Production.Culture 	where Name = @CultureName END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 09:45:32.070,2025-07-09 09:45:32.070
AdventureWorks2017,dbo,ProductSearchLang,AdventureWorks2017,dbo,ProductSearchLang,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- ============================================= -- Author:		Tyler -- Create date: 07/02/2025 -- Description:	Gets product data where language matches selected -- ============================================= CREATE PROCEDURE [dbo].[ProductSearchLang]  	-- Add the parameters for the stored procedure here 	@CultureID nvarchar(2) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select pc.ProductCategoryID, pc.Name as Product_Catagory, ps.ProductSubcategoryID,  		   ps.Name as Product_Subcategory, ProductID, ProductNumber, p.Name as Product_Name, 		   ListPrice, StandardCost, (ListPrice - StandardCost) as Margin_Profit, Size, Color, Weight, 		   c.Name as Culture_Name, pd.Description 	from Production.Product as p 		join Production.ProductSubcategory as ps on p.ProductSubcategoryID = ps.ProductSubcategoryID 		join Production.ProductCategory as pc on ps.ProductCategoryID = pc.ProductCategoryID 		join Production.ProductModelProductDescriptionCulture as pmpdc on p.ProductModelID = pmpdc.ProductModelID 		join Production.ProductDescription as pd on pmpdc.ProductDescriptionID = pd.ProductDescriptionID 		join Production.Culture as c on pmpdc.CultureID = c.CultureID 	where listprice <> 0.00 and c.CultureID = @CultureID 	order by ProductCategoryID, ProductSubcategoryID, p.Name, Culture_Name END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 09:46:09.620,2025-07-09 09:46:36.880
AdventureWorks2017,dbo,uspGetEmployeeData,AdventureWorks2017,dbo,uspGetEmployeeData,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- ============================================= -- Author:		Tyler -- Create date: 06/30/2025 -- Description:	Gets all employee information -- ============================================= CREATE PROCEDURE [dbo].[uspGetEmployeeData]  	-- Add the parameters for the stored procedure here 	@BusinessEntityId int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select e.BusinessEntityID, FirstName, MiddleName, LastName,  		   JobTitle, format(BirthDate, 'yyyy-MM-dd') as BirthDate,  		   MaritalStatus, Gender, format(HireDate, 'yyyy-MM-dd') as HireDate,  		   VacationHours, SickLeaveHours, d.Name as dep_name, d.GroupName as dep_groupname,  		   s.Name as shift_name, (52 * (eph.Rate * 40)) as Yearly_Salary 	from HumanResources.Employee as e 		join person.person as p on e.BusinessEntityID = p.BusinessEntityID 		join HumanResources.EmployeeDepartmentHistory as edh on e.BusinessEntityID = edh.BusinessEntityID 		join HumanResources.Department as d on edh.DepartmentID = d.DepartmentID 		join HumanResources.Shift as s on edh.ShiftID = s.ShiftID 		join HumanResources.EmployeePayHistory as eph on e.BusinessEntityID = eph.BusinessEntityID 	where eph.RateChangeDate = ( 			select max(eph2.RateChangeDate)  			from HumanResources.EmployeePayHistory as eph2 			where eph.BusinessEntityID = eph2.BusinessEntityID 		)  		AND EndDate is null  		AND e.BusinessEntityID = @BusinessEntityId; END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 09:47:10.387,2025-07-09 09:47:10.387
AdventureWorks2017,dbo,uspGetEmployeeName,AdventureWorks2017,dbo,uspGetEmployeeName,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- ============================================= -- Author:		Tyler Ross -- Create date: 06/30/2025 -- Description:	Gets name of employee (First and Last) -- ============================================= CREATE PROCEDURE [dbo].[uspGetEmployeeName]  	-- Add the parameters for the stored procedure here 	@BusinessEntityID int = NULL AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	SELECT p.FirstName, p.LastName 	FROM HumanResources.Employee as e 		JOIN Person.Person as p on e.BusinessEntityID = p.BusinessEntityID 	WHERE e.BusinessEntityID = @BusinessEntityID END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 09:47:42.287,2025-07-09 09:47:51.253
AdventureWorks2017,dbo,uspGetProductName,AdventureWorks2017,dbo,uspGetProductName,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- ============================================= -- Author:		Tyler -- Create date: 07/02/2025 -- Description:	Gets Product Based on Subcatgory -- ============================================= CREATE PROCEDURE [dbo].[uspGetProductName]  	-- Add the parameters for the stored procedure here 	@SubCategory nvarchar(50) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select p.Name 	from Production.Product as p 		join Production.ProductSubcategory as ps on p.ProductSubcategoryID = ps.ProductSubcategoryID 		join Production.ProductCategory as pc on ps.ProductCategoryID = pc.ProductCategoryID 	where ps.Name = @SubCategory  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 09:48:25.940,2025-07-09 09:48:25.940
AdventureWorks2017,dbo,uspGetSubcategory,AdventureWorks2017,dbo,uspGetSubcategory,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," -- ============================================= -- Author:		Tyler -- Create date: 07/02/2025 -- Description:	Gets Subcategory choices from primary category -- ============================================= CREATE PROCEDURE [dbo].[uspGetSubcategory]  	-- Add the parameters for the stored procedure here 	@Category nvarchar(50) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select ps.Name 	from Production.ProductSubcategory as ps 		join Production.ProductCategory as pc on ps.ProductCategoryID = pc.ProductCategoryID 	where pc.Name = @Category END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 09:48:48.477,2025-07-09 09:48:48.477
AdventureWorks2017,dbo,uspGetSalesPersonData,AdventureWorks2017,dbo,uspGetSalesPersonData,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/09/2025 -- Description:	Gets Sales Person Data -- ============================================= CREATE PROCEDURE uspGetSalesPersonData  	-- Add the parameters for the stored procedure here 	@ID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select sp.BusinessEntityID, sp.TerritoryID, SalesQuota, Bonus, CommissionPct, sp.SalesYTD,  		   sp.SalesLastYear, FirstName, LastName, st.name as Region_Name, st.CountryRegionCode, 		   [st].[group] as Continent, st.salesytd as Total_SalesYTD, st.SalesLastYear as Total_SalesYTD_LastYear 	from Sales.SalesPerson as sp 		join person.person as p on sp.BusinessEntityID = p.BusinessEntityID 	    left join sales.SalesTerritory as st on sp.TerritoryID = st.TerritoryID 	where sp.BusinessEntityID = @ID; END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-09 14:24:19.300,2025-07-09 14:41:44.200
AdventureWorks2017,dbo,sp_upgraddiagrams,AdventureWorks2017,dbo,sp_upgraddiagrams,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_upgraddiagrams 	AS 	BEGIN 		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL 			return 0; 	 		CREATE TABLE dbo.sysdiagrams 		( 			name sysname NOT NULL, 			principal_id int NOT NULL,	-- we may change it to varbinary(85) 			diagram_id int PRIMARY KEY IDENTITY, 			version int, 	 			definition varbinary(max) 			CONSTRAINT UK_principal_name UNIQUE 			( 				principal_id, 				name 			) 		);   		/* Add this if we need to have some form of extended properties for diagrams */ 		/* 		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL 		BEGIN 			CREATE TABLE dbo.sysdiagram_properties 			( 				diagram_id int, 				name sysname, 				value varbinary(max) NOT NULL 			) 		END 		*/  		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL 		begin 			insert into dbo.sysdiagrams 			( 				[name], 				[principal_id], 				[version], 				[definition] 			) 			select	  				convert(sysname, dgnm.[uvalue]), 				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa 				0,							-- zero for old format, dgdef.[version], 				dgdef.[lvalue] 			from dbo.[dtproperties] dgnm 				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	 				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid] 				 			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_'  			return 2; 		end 		return 1; 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.877,2025-07-11 09:19:54.877
AdventureWorks2017,dbo,sp_helpdiagrams,AdventureWorks2017,dbo,sp_helpdiagrams,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_helpdiagrams 	( 		@diagramname sysname = NULL, 		@owner_id int = NULL 	) 	WITH EXECUTE AS N'dbo' 	AS 	BEGIN 		DECLARE @user sysname 		DECLARE @dboLogin bit 		EXECUTE AS CALLER; 			SET @user = USER_NAME(); 			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner')); 		REVERT; 		SELECT 			[Database] = DB_NAME(), 			[Name] = name, 			[ID] = diagram_id, 			[Owner] = USER_NAME(principal_id), 			[OwnerID] = principal_id 		FROM 			sysdiagrams 		WHERE 			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND 			(@diagramname IS NULL OR name = @diagramname) AND 			(@owner_id IS NULL OR principal_id = @owner_id) 		ORDER BY 			4, 5, 1 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.900,2025-07-11 09:19:54.900
AdventureWorks2017,dbo,sp_helpdiagramdefinition,AdventureWorks2017,dbo,sp_helpdiagramdefinition,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_helpdiagramdefinition 	( 		@diagramname 	sysname, 		@owner_id	int	= null 		 	) 	WITH EXECUTE AS N'dbo' 	AS 	BEGIN 		set nocount on  		declare @theId 		int 		declare @IsDbo 		int 		declare @DiagId		int 		declare @UIDFound	int 	 		if(@diagramname is null) 		begin 			RAISERROR (N'E_INVALIDARG', 16, 1); 			return -1 		end 	 		execute as caller; 		select @theId = DATABASE_PRINCIPAL_ID(); 		select @IsDbo = IS_MEMBER(N'db_owner'); 		if(@owner_id is null) 			select @owner_id = @theId; 		revert;  	 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname; 		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId )) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1); 			return -3 		end  		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ;  		return 0 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.903,2025-07-11 09:19:54.903
AdventureWorks2017,dbo,sp_creatediagram,AdventureWorks2017,dbo,sp_creatediagram,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_creatediagram 	( 		@diagramname 	sysname, 		@owner_id		int	= null, 	 		@version 		int, 		@definition 	varbinary(max) 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 	 		declare @theId int 		declare @retval int 		declare @IsDbo	int 		declare @userName sysname 		if(@version is null or @diagramname is null) 		begin 			RAISERROR (N'E_INVALIDARG', 16, 1); 			return -1 		end 	 		execute as caller; 		select @theId = DATABASE_PRINCIPAL_ID();  		select @IsDbo = IS_MEMBER(N'db_owner'); 		revert;  		 		if @owner_id is null 		begin 			select @owner_id = @theId; 		end 		else 		begin 			if @theId <> @owner_id 			begin 				if @IsDbo = 0 				begin 					RAISERROR (N'E_INVALIDARG', 16, 1); 					return -1 				end 				select @theId = @owner_id 			end 		end 		-- next 2 line only for test, will be removed after define name unique 		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname) 		begin 			RAISERROR ('The name is already used.', 16, 1); 			return -2 		end 	 		insert into dbo.sysdiagrams(name, principal_id , version, definition) 				VALUES(@diagramname, @theId, @version, @definition) ; 		 		select @retval = @@IDENTITY  		return @retval 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.907,2025-07-11 09:19:54.907
AdventureWorks2017,dbo,sp_renamediagram,AdventureWorks2017,dbo,sp_renamediagram,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_renamediagram 	( 		@diagramname 		sysname, 		@owner_id		int	= null, 		@new_diagramname	sysname 	 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 		declare @theId 			int 		declare @IsDbo 			int 		 		declare @UIDFound 		int 		declare @DiagId			int 		declare @DiagIdTarg		int 		declare @u_name			sysname 		if((@diagramname is null) or (@new_diagramname is null)) 		begin 			RAISERROR ('Invalid value', 16, 1); 			return -1 		end 	 		EXECUTE AS CALLER; 		select @theId = DATABASE_PRINCIPAL_ID(); 		select @IsDbo = IS_MEMBER(N'db_owner');  		if(@owner_id is null) 			select @owner_id = @theId; 		REVERT; 	 		select @u_name = USER_NAME(@owner_id) 	 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname  		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId)) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1) 			return -3 		end 	 		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change 		--	return 0; 	 		if(@u_name is null) 			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname 		else 			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname 	 		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg) 		begin 			RAISERROR ('The name is already used.', 16, 1); 			return -2 		end		 	 		if(@u_name is null) 			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId 		else 			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId 		return 0 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.910,2025-07-11 09:19:54.910
AdventureWorks2017,dbo,sp_alterdiagram,AdventureWorks2017,dbo,sp_alterdiagram,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_alterdiagram 	( 		@diagramname 	sysname, 		@owner_id	int	= null, 		@version 	int, 		@definition 	varbinary(max) 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 	 		declare @theId 			int 		declare @retval 		int 		declare @IsDbo 			int 		 		declare @UIDFound 		int 		declare @DiagId			int 		declare @ShouldChangeUID	int 	 		if(@diagramname is null) 		begin 			RAISERROR ('Invalid ARG', 16, 1) 			return -1 		end 	 		execute as caller; 		select @theId = DATABASE_PRINCIPAL_ID();	  		select @IsDbo = IS_MEMBER(N'db_owner');  		if(@owner_id is null) 			select @owner_id = @theId; 		revert; 	 		select @ShouldChangeUID = 0 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname  		 		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound)) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1); 			return -3 		end 	 		if(@IsDbo <> 0) 		begin 			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id 			begin 				select @ShouldChangeUID = 1 ; 			end 		end  		-- update dds data			 		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;  		-- change owner 		if(@ShouldChangeUID = 1) 			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;  		-- update dds version 		if(@version is not null) 			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;  		return 0 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.910,2025-07-11 09:19:54.910
AdventureWorks2017,dbo,sp_dropdiagram,AdventureWorks2017,dbo,sp_dropdiagram,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL," 	CREATE PROCEDURE dbo.sp_dropdiagram 	( 		@diagramname 	sysname, 		@owner_id	int	= null 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 		declare @theId 			int 		declare @IsDbo 			int 		 		declare @UIDFound 		int 		declare @DiagId			int 	 		if(@diagramname is null) 		begin 			RAISERROR ('Invalid value', 16, 1); 			return -1 		end 	 		EXECUTE AS CALLER; 		select @theId = DATABASE_PRINCIPAL_ID(); 		select @IsDbo = IS_MEMBER(N'db_owner');  		if(@owner_id is null) 			select @owner_id = @theId; 		REVERT;  		 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname  		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId)) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1) 			return -3 		end 	 		delete from dbo.sysdiagrams where diagram_id = @DiagId; 	 		return 0; 	END 	",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-11 09:19:54.913,2025-07-11 09:19:54.913
AdventureWorks2017,dbo,SearchStoreName,AdventureWorks2017,dbo,SearchStoreName,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Search By Store Name -- ============================================= CREATE PROCEDURE [dbo].[SearchStoreName] 	-- Add the parameters for the stored procedure here 	@StoreName varchar(500) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select distinct swa.BusinessEntityID, swa.Name, AddressType, AddressLine1, AddressLine2, City, StateProvinceName, PostalCode, CountryRegionName, 		--swc.ContactType, swc.Title, swc.FirstName, swc.MiddleName, swc.LastName, swc.Suffix, swc.PhoneNumber, swc.PhoneNumberType, swc.EmailAddress, swc.EmailPromotion, 		swd.AnnualSales, swd.AnnualRevenue, swd.BankName, swd.BusinessType, swd.YearOpened, swd.Specialty, swd.SquareFeet, swd.Brands, swd.Internet, swd.NumberEmployees 	from sales.vStoreWithAddresses as swa 		--join sales.vStoreWithContacts as swc on swa.BusinessEntityID = swc.BusinessEntityID 		join sales.vStoreWithDemographics as swd on swa.BusinessEntityID = swd.BusinessEntityID 	where swa.name like '%'+@StoreName+'%' END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 11:09:48.560,2025-07-14 15:44:06.190
AdventureWorks2017,dbo,SearchStoreCity,AdventureWorks2017,dbo,SearchStoreCity,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Search By Store Name -- ============================================= CREATE PROCEDURE [dbo].[SearchStoreCity] 	-- Add the parameters for the stored procedure here 	@City varchar(500) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select distinct swa.BusinessEntityID, swa.Name, AddressType, AddressLine1, AddressLine2, City, StateProvinceName, PostalCode, CountryRegionName, 		--swc.ContactType, swc.Title, swc.FirstName, swc.MiddleName, swc.LastName, swc.Suffix, swc.PhoneNumber, swc.PhoneNumberType, swc.EmailAddress, swc.EmailPromotion, 		swd.AnnualSales, swd.AnnualRevenue, swd.BankName, swd.BusinessType, swd.YearOpened, swd.Specialty, swd.SquareFeet, swd.Brands, swd.Internet, swd.NumberEmployees 	from sales.vStoreWithAddresses as swa 		--join sales.vStoreWithContacts as swc on swa.BusinessEntityID = swc.BusinessEntityID 		join sales.vStoreWithDemographics as swd on swa.BusinessEntityID = swd.BusinessEntityID 	where swa.City like '%'+@City+'%' END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 11:29:08.377,2025-07-14 15:44:50.340
AdventureWorks2017,dbo,SearchStoreCountry,AdventureWorks2017,dbo,SearchStoreCountry,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Search By Store Name -- ============================================= CREATE PROCEDURE [dbo].[SearchStoreCountry] 	-- Add the parameters for the stored procedure here 	@Country varchar(500) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select distinct swa.BusinessEntityID, swa.Name, AddressType, AddressLine1, AddressLine2, City, StateProvinceName, PostalCode, CountryRegionName, 		--swc.ContactType, swc.Title, swc.FirstName, swc.MiddleName, swc.LastName, swc.Suffix, swc.PhoneNumber, swc.PhoneNumberType, swc.EmailAddress, swc.EmailPromotion, 		swd.AnnualSales, swd.AnnualRevenue, swd.BankName, swd.BusinessType, swd.YearOpened, swd.Specialty, swd.SquareFeet, swd.Brands, swd.Internet, swd.NumberEmployees 	from sales.vStoreWithAddresses as swa 		--join sales.vStoreWithContacts as swc on swa.BusinessEntityID = swc.BusinessEntityID 		join sales.vStoreWithDemographics as swd on swa.BusinessEntityID = swd.BusinessEntityID 	where swa.CountryRegionName like '%'+@Country+'%' END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 11:29:54.450,2025-07-14 15:44:41.763
AdventureWorks2017,dbo,SearchStoreYear,AdventureWorks2017,dbo,SearchStoreYear,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Search By Store Name -- ============================================= CREATE PROCEDURE [dbo].[SearchStoreYear] 	-- Add the parameters for the stored procedure here 	@Year varchar(500) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select distinct swa.BusinessEntityID, swa.Name, AddressType, AddressLine1, AddressLine2, City, StateProvinceName, PostalCode, CountryRegionName, 		--swc.ContactType, swc.Title, swc.FirstName, swc.MiddleName, swc.LastName, swc.Suffix, swc.PhoneNumber, swc.PhoneNumberType, swc.EmailAddress, swc.EmailPromotion, 		swd.AnnualSales, swd.AnnualRevenue, swd.BankName, swd.BusinessType, swd.YearOpened, swd.Specialty, swd.SquareFeet, swd.Brands, swd.Internet, swd.NumberEmployees 	from sales.vStoreWithAddresses as swa 		--join sales.vStoreWithContacts as swc on swa.BusinessEntityID = swc.BusinessEntityID 		join sales.vStoreWithDemographics as swd on swa.BusinessEntityID = swd.BusinessEntityID 	where swd.YearOpened like '%'+@Year+'%' END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 11:31:29.877,2025-07-14 15:44:20.067
AdventureWorks2017,dbo,uspGetSpecificAddressData,AdventureWorks2017,dbo,uspGetSpecificAddressData,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Searches for a specific address data via a BusinessEntityID -- ============================================= CREATE PROCEDURE uspGetSpecificAddressData  	-- Add the parameters for the stored procedure here 	@BusinessEntityID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select BusinessEntityID, Name, AddressType, AddressLine1, AddressLine2, City, StateProvinceName, PostalCode, CountryRegionName 	from sales.vStoreWithAddresses 	where BusinessEntityID = @BusinessEntityID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 13:26:44.990,2025-07-14 13:26:44.990
AdventureWorks2017,dbo,uspGetSpecificContactData,AdventureWorks2017,dbo,uspGetSpecificContactData,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Searches for a specific address data via a BusinessEntityID -- ============================================= CREATE PROCEDURE uspGetSpecificContactData  	-- Add the parameters for the stored procedure here 	@BusinessEntityID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select swc.ContactType, swc.Title, swc.FirstName, swc.MiddleName, swc.LastName, swc.Suffix, swc.PhoneNumber, swc.PhoneNumberType, swc.EmailAddress, swc.EmailPromotion 	from sales.vStoreWithContacts as swc 	where BusinessEntityID = @BusinessEntityID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 13:27:24.997,2025-07-14 13:27:24.997
AdventureWorks2017,dbo,uspGetSpecificDemographicsData,AdventureWorks2017,dbo,uspGetSpecificDemographicsData,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Searches for a specific address data via a BusinessEntityID -- ============================================= CREATE PROCEDURE uspGetSpecificDemographicsData  	-- Add the parameters for the stored procedure here 	@BusinessEntityID int = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select swd.AnnualSales, swd.AnnualRevenue, swd.BankName, swd.BusinessType, swd.YearOpened, swd.Specialty, swd.SquareFeet, swd.Brands, swd.Internet, swd.NumberEmployees 	from sales.vStoreWithDemographics as swd 	where BusinessEntityID = @BusinessEntityID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 13:28:04.730,2025-07-14 13:28:04.730
AdventureWorks2017,dbo,uspSearchStoreByID,AdventureWorks2017,dbo,uspSearchStoreByID,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/14/2025 -- Description:	Searches for a specific store given an ID (this can get multiple, as shippers are part of this group) -- ============================================= CREATE PROCEDURE [dbo].[uspSearchStoreByID] 	-- Add the parameters for the stored procedure here 	@BusinessEntityID varchar(500) = null AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select swa.BusinessEntityID, swa.Name, AddressType, AddressLine1, AddressLine2, City, StateProvinceName, PostalCode, CountryRegionName, 		swc.ContactType, swc.Title, swc.FirstName, swc.MiddleName, swc.LastName, swc.Suffix, swc.PhoneNumber, swc.PhoneNumberType, swc.EmailAddress, swc.EmailPromotion, 		swd.AnnualSales, swd.AnnualRevenue, swd.BankName, swd.BusinessType, swd.YearOpened, swd.Specialty, swd.SquareFeet, swd.Brands, swd.Internet, swd.NumberEmployees 	from sales.vStoreWithAddresses as swa 		join sales.vStoreWithContacts as swc on swa.BusinessEntityID = swc.BusinessEntityID 		join sales.vStoreWithDemographics as swd on swa.BusinessEntityID = swd.BusinessEntityID 	where swa.BusinessEntityID = @BusinessEntityID 	order by swa.AddressType asc, swc.ContactType asc END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-14 13:34:53.427,2025-07-14 14:48:21.750
AdventureWorks2017,dbo,uspUpdateStoreAddressInfo,AdventureWorks2017,dbo,uspUpdateStoreAddressInfo,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/15/2025 -- Description:	Updates the store address data that has been modified -- ============================================= CREATE PROCEDURE uspUpdateStoreAddressInfo  	-- Add the parameters for the stored procedure here 	@AddressID int,     @AddressLine1 nvarchar(60),     @AddressLine2 nvarchar(60),     @City nvarchar(30),     @StateProvinceID int,     @PostalCode nvarchar(15) AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	update Person.Address     set AddressLine1 = @AddressLine1,         AddressLine2 = @AddressLine2,         City = @City,         StateProvinceID = @StateProvinceID,         PostalCode = @PostalCode     where AddressID = @AddressID  END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-15 12:55:27.333,2025-07-15 12:55:27.333
AdventureWorks2017,dbo,uspGetPersonIDs,AdventureWorks2017,dbo,uspGetPersonIDs,PROCEDURE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,SQL,"-- ============================================= -- Author:		Tyler -- Create date: 07/15/2025 -- Description:	Gets the PersonID's - As there can be multiple using a stored proc -- ============================================= CREATE PROCEDURE uspGetPersonIDs  	-- Add the parameters for the stored procedure here 	@BusinessEntityID int = 0 AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	select PersonID, p.Title, p.FirstName, p.MiddleName, p.LastName from person.BusinessEntityContact as bea 		join person.person as p on bea.PersonID = p.BusinessEntityID 		join person.PersonPhone as pp on p.BusinessEntityID = pp.BusinessEntityID 		join person.PhoneNumberType as pnt on pp.PhoneNumberTypeID = pnt.PhoneNumberTypeID  	where bea.BusinessEntityID = @BusinessEntityID END ",NULL,NULL,NULL,NO,MODIFIES,NULL,NULL,YES,-1,NO,NO,2025-07-15 16:30:51.743,2025-07-15 16:54:13.307
